---
- name: install atomfeed-console rpm
  yum: name=atomfeed-console-{{ atomfeed_console_version }} state=latest

- name: copy atomfeed-console config
  template:
    src=templates/atomfeed-console.yml.j2
    dest=/etc/atomfeed-console/atomfeed-console.yml
    mode=644
    owner={{ atomfeed_console_user }}
    group={{ atomfeed_console_group }}

- name: restart atomfeed-console service
  systemd: name=atomfeed-console state=restarted enabled=true

- block:

   - name: get matched iptable rule
     shell: iptables -nL --line-numbers | grep ATOMFEED_CONSOLE  -m 1 | cut -c 1-2
     register: matchedRule

   - name: delete matching rule if exists
     shell: iptables -D INPUT {{ matchedRule.stdout }}
     when: matchedRule.stdout!=""

   - name: allow atomfeed console port through firewall
     command: /sbin/iptables -I INPUT 1 -p tcp --dport {{ atomfeed_console_port }} -j ACCEPT -m comment --comment "ATOMFEED_CONSOLE"

   - name: save iptables
     command: /usr/libexec/iptables/iptables.init save

  when: docker is not defined

- name: Install python-psycopg2
  yum: name=python-psycopg2 state=present

- name: create atomfeed console application user in postgres databases
  postgresql_user: name={{ atomfeed_console_db_username }} role_attr_flags=NOSUPERUSER
  delegate_to: "{{ item }}"
  when: "item is defined and item | length > 0"
  with_items:
    - "{{ groups['bahmni-lab-db'] }}"
    - "{{ groups['bahmni-erp-db'] }}"
    - "{{ groups['pacs-integration-db'] }}"

- name: grant USAGE privilege on clinlims schema for atomfeed console application user
  postgresql_privs:
    db: clinlims
    privs: USAGE
    type: schema
    objs: clinlims
    roles: "{{ atomfeed_console_db_username }}"
    state: present
  delegate_to: "{{ groups['bahmni-lab-db'][0] }}"
  when: "groups['bahmni-lab-db'] is defined and groups['bahmni-lab-db'] | length > 0"

- name: add privileges to atomfeed console application db user in postgres databases
  postgresql_privs:
    db: "{{ item.db }}"
    privs: SELECT,UPDATE
    type: table
    schema: "{{ item.schema }}"
    objs: markers,failed_events,failed_event_retry_log
    roles: "{{ atomfeed_console_db_username }}"
    state: present
  delegate_to: "{{ item.group[0] }}"
  when: "item.group | length > 0"
  with_items:
    - { group: "{{ groups['bahmni-lab-db'] }}", db: clinlims, schema: clinlims}
    - { group: "{{ groups['bahmni-erp-db'] }}", db: odoo, schema: public }
    - { group: "{{ groups['pacs-integration-db'] }}", db: bahmni_pacs, schema: public }

- name: allow atomfeed console application host to access postgres databases
  blockinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK atomfeed-console:{{ item.db }} -->"
    state: present
    block: |
      {% if groups['atomfeed-console'][0] not in [False, 'localhost', '127.0.0.1'] %}
      host {{ item.db }} {{ item.db_user }} {{ groups['atomfeed-console'][0] }}/32 trust
      {% endif %}
  delegate_to: "{{ item.group[0] }}"
  when: "item.group | length > 0"
  with_items:
    - {group: "{{ groups['bahmni-lab-db'] }}", db_user: "{{atomfeed_console_db_username}}", db: clinlims}
    - {group: "{{ groups['bahmni-erp-db'] }}", db_user: "{{ atomfeed_console_db_username }}", db: odoo}
    - {group: "{{ groups['pacs-integration-db'] }}", db_user: "{{ atomfeed_console_db_username }}", db: bahmni_pacs}

- name: reload postgresql
  systemd:
    name=postgresql-{{ postgres_version }}
    state=reloaded
  delegate_to: "{{ item }}"
  when: "item is defined and item | length > 0"
  with_items:
    - "{{ groups['bahmni-lab-db'] }}"
    - "{{ groups['bahmni-erp-db'] }}"
    - "{{ groups['pacs-integration-db'] }}"

- name: Install python mysql for ansible
  yum: name=MySQL-python state=present

- name: allow atomfeed console application to access openmrs database
  mysql_user:
    name: "{{ atomfeed_console_db_username }}"
    password: "{{ atomfeed_console_db_password }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    host: "{{ groups['atomfeed-console'][0] }}"
    priv: "openmrs.{{ item }}:SELECT,UPDATE"
    append_privs: true
  delegate_to:  "{{ groups['bahmni-emr-db'][0] }}"
  with_items:
    - markers
    - failed_events
    - failed_event_retry_log

- name: add atomfeed-console ssl conf
  template:
    src=templates/atomfeed_console_ssl.conf.j2
    dest=/etc/httpd/conf.d/atomfeed_console_ssl.conf
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}
  delegate_to:  "{{ groups['bahmni-emr'][0] }}"

- name: reload httpd
  systemd: name=httpd state=reloaded
  delegate_to:  "{{ groups['bahmni-emr'][0] }}"
