- name: Check if postgres yum repo rpm is present
  stat: path={{postgres_repo_rpm_location}}
  register: postgresRepoRpm

- name: Download postgres yum repo rpm if not present
  command: "wget -q -O {{ postgres_repo_rpm_location }} {{postgres_repo_download_url}} creates={{ postgres_repo_rpm_location }}"
  when: postgresRepoRpm.stat.exists == false

- name: Install postgresql yum repository
  yum: name={{postgres_repo_rpm_location}} state=present

- name: Install python-psycopg2
  command: yum -y install python-psycopg2

- name: Install postgresql
  yum: name="postgresql{{postgres_bin_version}}-server" state=present

- name: Install postgresql-contrib
  yum: name="postgresql{{postgres_bin_version}}-contrib" state=present

- name: Initiate database
  command: /usr/pgsql-{{postgres_version}}/bin/postgresql{{postgres_bin_version}}-setup initdb creates=/var/lib/pgsql/{{postgres_version}}/data/postgresql.conf

- set_fact: 
    master: "{{ (inventory_hostname in groups['bahmni-lab-db'] and (groups['bahmni-lab-db-slave'] is defined and groups['bahmni-lab-db-slave']|length > 0)) or
            (inventory_hostname in groups['bahmni-erp-db'] and (groups['bahmni-erp-db-slave'] is defined and groups['bahmni-erp-db-slave']|length > 0)) or
            (inventory_hostname in groups['pacs-integration-db'] and (groups['pacs-integration-db-slave'] is defined and groups['pacs-integration-db-slave']|length > 0)) or
            (inventory_hostname in groups['dcm4chee-db'] and (groups['dcm4chee-db-slave'] is defined and groups['dcm4chee-db-slave']|length > 0)) }}"

- set_fact:
    slave: "{{ 'bahmni-lab-db-slave' in group_names or
                'bahmni-erp-db-slave' in group_names or
                'pacs-integration-db-slave' in group_names or
                'dcm4chee-db-slave' in group_names }}" 

- name: Update postgresql conf with replication configuration
  blockinfile:
      marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK postgresql-replication -->"
      dest: /var/lib/pgsql/{{ postgres_version }}/data/postgresql.conf
      block: |
        wal_level = {{ slave | default(false) | ternary('minimal', 'hot_standby') }}
        max_wal_senders = {{ slave | default(false) | ternary('0', '3') }}  
        wal_keep_segments = {{ slave | default(false) | ternary('0', '32') }}
        hot_standby = on
  when: "master or slave" 

- name: insert/update postgres config after "local" is for Unix domain socket connections only line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^local\s+all\s+all\s+peer'
    state: present
    backrefs: yes
    line: local  all    all   trust

- name: insert/update postgres config after IPv4 local connections line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^host\s+all\s+all\s+127.0.0.1/32\s+ident'
    state: present
    backrefs: yes
    line: host  all    all   127.0.0.1/32 trust

- name: insert/update postgres config after IPv6 local connections line
  lineinfile:
    dest: /var/lib/pgsql/{{ postgres_version }}/data/pg_hba.conf
    regexp: '^host\s+all\s+all\s+::1/128\s+ident'
    state: present
    backrefs: yes
    line: host  all    all   ::1/128 trust


- name: Removing recovery config file from master db
  file:
      path=/var/lib/pgsql/{{ postgres_version }}/data/recovery.conf
      state=absent
  when: inventory_hostname in groups['bahmni-lab-db'] or inventory_hostname in groups['bahmni-erp-db'] or inventory_hostname in groups['pacs-integration-db'] or inventory_hostname in groups['dcm4chee-db']
  register: recovery_conf

- block:

    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep POSTGRES  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow postgres port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport  5432 -j ACCEPT -m comment --comment "POSTGRES"

    - name: save iptables
      command: /usr/libexec/iptables/iptables.init save

  when: docker is not defined

- name: Stop PostgreSQL
  systemd:
    name=postgresql-{{ postgres_version }}
    state=stopped
  when: recovery_conf is defined and recovery_conf.changed==true

- name: Start PostgreSQL and enable at boot
  systemd:
    name=postgresql-{{ postgres_version }}
    enabled=yes
    state=started

- name: Create postgres user
  postgresql_user: name={{ postgres_user }} role_attr_flags=CREATEDB,NOCREATEROLE,SUPERUSER,REPLICATION
  sudo_user: postgres
  when: postgres_user is defined and (inventory_hostname in groups['bahmni-lab-db'] or inventory_hostname in groups['bahmni-erp-db'] or inventory_hostname in groups['pacs-integration-db'] or inventory_hostname in groups['dcm4chee-db'])
# creating user only in master dbs. User creation will be replicated in slave.

