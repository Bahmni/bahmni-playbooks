- name: add mysql 5.7 yum repo
  template:
    src=mysql57.repo.j2
    dest=/etc/yum.repos.d/mysql57.repo

- name: Install python mysql for ansible
  yum: name={{ item }} state=present
  with_items:
    - mysql-community-common-{{mysql_version}}
    - mysql-community-libs-{{mysql_version}}
    - mysql-community-libs-compat-{{mysql_version}}
    - MySQL-python

- name: Check if any version of mysql is present
  command: mysql --version
  register: mysqlVersion
  ignore_errors: true

- name: Uninstall MySQL if {{mysql_version}} is absent
  yum: name={{ item }} state=absent
  with_items:
    - mysql-server
    - mysql
  when: mysqlVersion|success and mysqlVersion.stdout.find('{{mysql_version}}') == -1

- name: Install mysql from mysql{{mysql_version}} yum repository
  yum: name={{ item }} state=present
  with_items:
    - mysql-community-common-{{mysql_version}}
    - mysql-community-libs-{{mysql_version}}
    - mysql-community-client-{{mysql_version}}
    - mysql-community-libs-compat-{{mysql_version}}
    - mysql-community-server-{{mysql_version}}

  when: mysqlVersion|failed or mysqlVersion.stdout.find('{{mysql_version}}') == -1

- name: Create /var/log/mysql directory to store binlogs if it does not exist
  file: path=/var/log/mysql state=directory mode=0755 owner=mysql group=mysql

- name: Copy mysql config for mysql 5.7
  template:
    src=templates/my57.cnf.j2
    dest=/etc/my.cnf
    backup=yes
    mode=755
  register: my_cnf

- name: Stop Mysql Service
  systemd: name=mysqld state=stopped
  when: my_cnf.changed == true

- name: Start Mysql Service
  systemd: name=mysqld state=started enabled=true

- name: Retrieve the temp mysql root password
  shell: 'grep ''temporary password'' /var/log/mysqld.log | awk ''{print $11}'''
  register: mysql_temp_password
  ignore_errors: yes

- name: Update mysql root password with temp password
  shell: 'mysql -e "SET PASSWORD = PASSWORD(''{{ mysql_root_password }}''); FLUSH PRIVILEGES;" --connect-expired-password -u root -i -p''{{ mysql_temp_password.stdout }}'''
  when: mysql_temp_password.stdout != ''
  register: mysqlPasswordUpdated
  ignore_errors: yes

- name: Update mysql root password
  shell: 'mysql -e "UPDATE mysql.user SET authentication_string=PASSWORD(''{{mysql_root_password}}'') WHERE User=''root''; FLUSH PRIVILEGES;" -u root -i -p''{{mysql_old_root_password}}'''
  when: mysqlPasswordUpdated|skipped or mysqlPasswordUpdated|failed

- name: Upgrade Mysql
  command: mysql_upgrade -u{{mysql_root_user}} -p{{mysql_root_password}}
  ignore_errors: yes

- name: Restart Mysql Service
  systemd: name=mysqld state=restarted

- name: set mysql_role_ran fact
  set_fact:
    mysql_role_ran: true

- block:
    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep MYSQL  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow mysql port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport 3306 -j ACCEPT -m comment --comment "MYSQL"

    - name: save iptables
      command: /usr/libexec/iptables/iptables.init save

  when: docker is not defined
