- name: Install mx
  yum:
    name: "{{mx_download_url}}"
    state: present

- name: Install python-gdata
  yum: name=python-gdata-2.0.11-1.el6.noarch state=present

- name: install nonblockingloghandler
  pip: name=nonblockingloghandler state=present

- name: Check if postgres yum repo rpm is present
  stat: path={{postgres_repo_rpm_location}}
  register: postgresRepoRpm

- name: Download postgres yum repo rpm if not present
  command: "wget -q -O {{ postgres_repo_rpm_location }} {{postgres_repo_download_url}} creates={{ postgres_repo_rpm_location }}"
  when: postgresRepoRpm.stat.exists == false

- name: Install postgresql yum repository
  yum: name={{postgres_repo_rpm_location}} state=present

- name: Install python-psycopg2
  yum: name=python-psycopg2 state=present

- name: Check if bahmni-erp rpm needs an update
  command: yum list installed bahmni-erp
  register: installed_bahmni_erp
  ignore_errors: true

- name: Uninstall bahmni-erp rpm
  yum: name="bahmni-erp" state=absent
  when: installed_bahmni_erp.stdout.find("{{ bahmni_erp_version }}") == -1

- name: Check if openerp database dump is provided in /etc/bahmni-installer/deployment-artifacts
  local_action: stat path=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
  register: openerp_backup_file

- name: Copy file to remote location if it is available
  copy: src=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
        dest=/etc/bahmni-installer/deployment-artifacts/openerp_backup.sql
        mode=644
        owner={{ bahmni_user }}
        group={{ bahmni_group }}
  when: openerp_backup_file.stat.exists == True

- name: Install openerp database dump if provided and database does not exist
  script: restore_openerp_dump.sh
  sudo: yes
  when: openerp_backup_file.stat.exists == True

- name: Install bahmni-erp from bahmni-repo
  yum: name="bahmni-erp-{{ bahmni_erp_version }}" state=present

- name: Stop Openerp
  systemd:
    name=openerp
    state=stopped
  when: passive is not defined or passive != 'yes'
  tags: stop_bahmni

- name: Copy openerp server template
  template: src=openerp-server.conf.j2 dest=/etc/openerp/openerp-server.conf owner=openerp group=openerp mode=0655

- block:

    - name: Get matched IpTable rule
      shell: iptables -nL --line-numbers | grep BAHMNIERP  -m 1 | cut -c 1-2
      register: matchedRule

    - name: delete matching rule if exists
      shell: iptables -D INPUT {{ matchedRule.stdout }}
      when: matchedRule.stdout!=""

    - name: Allow openerp port through firewall
      command: /sbin/iptables -I INPUT 1 -p tcp --dport  {{ openerp_port }} -j ACCEPT -m comment --comment "BAHMNIERP"

    - name: save iptables
      command: /usr/libexec/iptables/iptables.init save

  when: docker is not defined

- name: Switch off chkconfig for Openerp on passive
  systemd: name=openerp state=stopped enabled=no
  when: passive is defined and passive == 'yes'

- name: Change ssl.conf file
  blockinfile:
    dest: /etc/httpd/conf.d/ssl.conf
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK erp-ssl -->"
    insertafter: "#erp-ssl"
    state: present
    block: |
      {% if openerp_url is defined and openerp_url.startswith('https') %}
        {% for erp_host in groups['bahmni-erp'] %}
        {% if hostvars[erp_host].get('passive', 'no') == hostvars[item].get('passive', 'no') %}
            RewriteCond %{HTTP_HOST} ={{ openerp_url | regex_replace('(?:https?://)?([^/:]+)?.*', '\1')  }}
            RewriteRule (.*) http://{{ erp_host }}:{{ openerp_port }}$1 [P]
        {% endif %}
        {% endfor %}
      {% endif %}
  delegate_to: "{{ item }}"
  with_items: "{{groups['bahmni-emr']}}"

- name: Start Openerp and enable at boot
  systemd:
    name=openerp
    enabled=yes
    state=started
  when: passive is not defined or passive != 'yes'
  tags: start_bahmni
